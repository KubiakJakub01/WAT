# This pipeline will be configured in Phase 2.
# It will be responsible for reading data from CSV files,
# parsing it, and sending it to the appropriate Elasticsearch index.

input {
  file {
    path => "/usr/share/logstash/data/airlines.csv"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    mode => "read"
    exit_after_read => true
    tags => ["airlines"]
  }
  file {
    path => "/usr/share/logstash/data/airports.csv"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    mode => "read"
    exit_after_read => true
    tags => ["airports"]
  }
  file {
    path => "/usr/share/logstash/data/flights.csv"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    mode => "read"
    exit_after_read => true
    tags => ["flights"]
  }
}

filter {
  if "airlines" in [tags] {
    csv {
      columns => ["airline_name","country_of_origin"]
      skip_header => true
    }
    mutate {
      add_field => { "[@metadata][index]" => "airlines" }
      remove_field => ["message", "host", "log", "event"]
    }
  } else if "airports" in [tags] {
    csv {
      columns => ["airport_code","name","city","country","location"]
      skip_header => true
    }
    mutate {
      rename => { "location" => "location_raw" }
      add_field => { "[@metadata][index]" => "airports" }
      remove_field => ["message", "host", "log", "event"]
    }
    ruby {
      code => "
        location_raw = event.get('location_raw')
        if location_raw && location_raw.include?(',')
          parts = location_raw.split(',')
          if parts.length == 2
            event.set('[location][lat]', parts[0].strip.to_f)
            event.set('[location][lon]', parts[1].strip.to_f)
            event.remove('location_raw')
          end
        end
      "
    }
  } else if "flights" in [tags] {
    csv {
      columns => ["flight_number","departure_airport_code","arrival_airport_code","departure_time","arrival_time","aircraft_id","airline_name","flight_duration","status"]
      skip_header => true
    }
    mutate {
      convert => {
        "flight_duration" => "integer"
      }
      add_field => { "[@metadata][index]" => "flights" }
      remove_field => ["message", "host", "log", "event"]
    }
    date {
      match => [ "departure_time", "ISO8601" ]
      target => "departure_time"
    }
    date {
      match => [ "arrival_time", "ISO8601" ]
      target => "arrival_time"
    }
  }
}

output {
  elasticsearch {
    hosts => ["http://es01:9200"]
    index => "%{[@metadata][index]}"
    ecs_compatibility => disabled
    ssl_certificate_verification => false
  }
  stdout { codec => rubydebug }
} 