[
    {
        "page_number": 1,
        "text": "SWPSD \u2013 2024/2025",
        "headings": [],
        "images": 1
    },
    {
        "page_number": 2,
        "text": "Kalkulator g\u0142osowy w Pythonie z GUI (Tkinter)\nPoni\u017cej znajduje si\u0119 implementacja kalkulatora g\u0142osowego w Pythonie\nz graficznym interfejsem u\u017cytkownika, wykorzystuj\u0105ca biblioteki\nspeech_recognition i pyttsx3 zamiast Microsoft Speech Platform:\nimport speech_recognition as sr\nimport pyttsx3\nimport tkinter as tk\nfrom tkinter import ttk\nfrom threading import Thread\nimport queue\nimport re\nclass VoiceCalculatorApp:\ndef __init__(self, root):\nself.root = root\nself.root.title(\"Kalkulator g\u0142osowy - Python\")\nself.root.geometry(\"500x400\")\n# Inicjalizacja syntezatora mowy\nself.engine = pyttsx3.init()\nself.engine.setProperty('rate', 150)\n# Inicjalizacja rozpoznawania mowy\nself.recognizer = sr.Recognizer()\nself.microphone = sr.Microphone()\nself.speech_on = False\nself.command_queue = queue.Queue()\n# Utw\u00f3rz interfejs u\u017cytkownika\nself.create_ui()\n# Uruchom w\u0105tek do przetwarzania komend\nself.process_thread = Thread(target=self.process_commands,\ndaemon=True)\nself.process_thread.start()\ndef create_ui(self):\n\"\"\"Tworzy interfejs u\u017cytkownika\"\"\"\nmain_frame = ttk.Frame(self.root, padding=\"20\")\nmain_frame.pack(fill=tk.BOTH, expand=True)\n# Nag\u0142\u00f3wek\nttk.Label(main_frame, text=\"Kalkulator g\u0142osowy\", font=('Arial',\n16)).pack(pady=10)\n# Przyciski kontrolne\nbutton_frame = ttk.Frame(main_frame)\nbutton_frame.pack(pady=10)",
        "headings": [],
        "images": 0
    },
    {
        "page_number": 3,
        "text": "self.start_button = ttk.Button(button_frame, text=\"Start\",\ncommand=self.start_listening)\nself.start_button.pack(side=tk.LEFT, padx=5)\nself.stop_button = ttk.Button(button_frame, text=\"Stop\",\ncommand=self.stop_listening, state=tk.DISABLED)\nself.stop_button.pack(side=tk.LEFT, padx=5)\n# Pole statusu\nself.status_label = ttk.Label(main_frame, text=\"Naci\u015bnij Start,\naby rozpocz\u0105\u0107 nas\u0142uchiwanie\", wraplength=400)\nself.status_label.pack(pady=10)\n# Wynik\nself.result_label = ttk.Label(main_frame, text=\"\",\nfont=('Arial', 14), foreground='blue')\nself.result_label.pack(pady=10)\n# Historia\nttk.Label(main_frame, text=\"Historia:\").pack()\nself.history_listbox = tk.Listbox(main_frame, height=5)\nself.history_listbox.pack(fill=tk.BOTH, expand=True, pady=5)\n# Przycisk czyszczenia\nttk.Button(main_frame, text=\"Wyczy\u015b\u0107 histori\u0119\",\ncommand=self.clear_history).pack(pady=5)\ndef start_listening(self):\n\"\"\"Rozpoczyna nas\u0142uchiwanie komend g\u0142osowych\"\"\"\nif not self.speech_on:\nself.speech_on = True\nself.start_button.config(state=tk.DISABLED)\nself.stop_button.config(state=tk.NORMAL)\nself.update_status(\"Nas\u0142uchuj\u0119... Powiedz np. 'Oblicz 5\nplus 3'\")\nself.speak(\"Nas\u0142uchuj\u0119\")\n# Uruchom w\u0105tek do nas\u0142uchiwania\nlisten_thread = Thread(target=self.listen_loop,\ndaemon=True)\nlisten_thread.start()\ndef stop_listening(self):\n\"\"\"Zatrzymuje nas\u0142uchiwanie komend g\u0142osowych\"\"\"\nif self.speech_on:\nself.speech_on = False\nself.start_button.config(state=tk.NORMAL)\nself.stop_button.config(state=tk.DISABLED)",
        "headings": [],
        "images": 0
    },
    {
        "page_number": 4,
        "text": "self.update_status(\"Zatrzymano nas\u0142uchiwanie\")\ndef listen_loop(self):\n\"\"\"P\u0119tla nas\u0142uchuj\u0105ca komend g\u0142osowych\"\"\"\nwith self.microphone as source:\nself.recognizer.adjust_for_ambient_noise(source)\nwhile self.speech_on:\ntry:\naudio = self.recognizer.listen(source, timeout=1,\nphrase_time_limit=3)\ncommand = self.recognizer.recognize_google(audio,\nlanguage=\"pl-PL\")\nself.command_queue.put(command.lower())\nexcept sr.WaitTimeoutError:\ncontinue\nexcept sr.UnknownValueError:\nself.command_queue.put(\"nie rozumiem\")\nexcept Exception as e:\nself.command_queue.put(f\"b\u0142\u0105d: {str(e)}\")\ndef process_commands(self):\n\"\"\"Przetwarza komendy z kolejki\"\"\"\nwhile True:\ntry:\ncommand = self.command_queue.get(timeout=0.1)\n# Aktualizacja interfejsu musi by\u0107 w g\u0142\u00f3wnym w\u0105tku\nself.root.after(0, self.process_command, command)\nexcept queue.Empty:\ncontinue\ndef process_command(self, command):\n\"\"\"Przetwarza pojedyncz\u0105 komend\u0119\"\"\"\nself.update_status(f\"Rozpoznano: {command}\")\nif \"stop\" in command:\nself.stop_listening()\nelif \"pomoc\" in command:\nself.speak(\"Powiedz: Oblicz liczba plus minus razy lub\npodzieli\u0107 przez liczba\")\nelif \"nie rozumiem\" in command or \"b\u0142\u0105d\" in command:\nself.speak(\"Nie rozumiem, powt\u00f3rz\")\nelif \"oblicz\" in command:\nself.process_math_command(command)\nelse:\nself.speak(\"Nie rozpoznano komendy\")\ndef process_math_command(self, command):",
        "headings": [],
        "images": 0
    },
    {
        "page_number": 5,
        "text": "\"\"\"Przetwarza komend\u0119 matematyczn\u0105\"\"\"\n# U\u017cyj wyra\u017cenia regularnego do wyodr\u0119bnienia liczb i operacji\nmatch = re.search(r'oblicz (\\d+) (plus|minus|razy|podzieli\u0107\nprzez) (\\d+)', command)\nif match:\nnum1 = int(match.group(1))\noperation = match.group(2)\nnum2 = int(match.group(3))\ntry:\nif operation == \"plus\":\nresult = num1 + num2\nelif operation == \"minus\":\nresult = num1 - num2\nelif operation == \"razy\":\nresult = num1 * num2\nelif operation == \"podzieli\u0107 przez\":\nresult = num1 / num2\noutput = f\"{num1} {operation} {num2} = {result}\"\nself.update_result(output)\nself.speak(f\"Wynik to {result}\")\nself.add_to_history(output)\nexcept ZeroDivisionError:\nself.update_result(\"B\u0142\u0105d: dzielenie przez zero\")\nself.speak(\"Nie mo\u017cna dzieli\u0107 przez zero\")\nexcept Exception as e:\nself.update_result(f\"B\u0142\u0105d: {str(e)}\")\nself.speak(\"Wyst\u0105pi\u0142 b\u0142\u0105d podczas oblicze\u0144\")\nelse:\nself.update_status(\"Nieprawid\u0142owy format komendy\nmatematycznej\")\nself.speak(\"Powt\u00f3rz komend\u0119 w formacie: Oblicz liczba plus\nminus razy lub podzieli\u0107 przez liczba\")\ndef speak(self, text):\n\"\"\"Syntezuje mow\u0119\"\"\"\nself.engine.say(text)\nself.engine.runAndWait()\ndef update_status(self, text):\n\"\"\"Aktualizuje pole statusu\"\"\"\nself.status_label.config(text=text)\ndef update_result(self, text):\n\"\"\"Aktualizuje pole wyniku\"\"\"\nself.result_label.config(text=text)",
        "headings": [],
        "images": 0
    },
    {
        "page_number": 6,
        "text": "def add_to_history(self, item):\n\"\"\"Dodaje wpis do historii\"\"\"\nself.history_listbox.insert(tk.END, item)\nself.history_listbox.see(tk.END)\ndef clear_history(self):\n\"\"\"Czy\u015bci histori\u0119\"\"\"\nself.history_listbox.delete(0, tk.END)\ndef on_closing(self):\n\"\"\"Zamyka aplikacj\u0119\"\"\"\nself.speech_on = False\nself.root.destroy()\nif __name__ == \"__main__\":\nroot = tk.Tk()\napp = VoiceCalculatorApp(root)\nroot.protocol(\"WM_DELETE_WINDOW\", app.on_closing)\nroot.mainloop()\nAby uruchomi\u0107 ten program, potrzebujesz:\n1. Pythona 3.6 lub nowszego\n2. Nast\u0119puj\u0105cych bibliotek (mo\u017cna zainstalowa\u0107 przez pip):\n2. pip install speechrecognition pyttsx3 tkinter\n3. Dzia\u0142a najlepiej na Windows, ale powinien te\u017c dzia\u0142a\u0107 na\nLinux/Mac z odpowiednimi modyfikacjami\nUwagi dotycz\u0105ce implementacji\n1. R\u00f3\u017cnice w stosunku do oryginalnego zadania:\n1. Zamiast Microsoft Speech Platform u\u017cyto otwartych bibliotek\nPythonowych\n2. GUI zbudowano przy u\u017cyciu Tkinter zamiast WPF\n3. Logika aplikacji jest podobna, ale implementacja r\u00f3\u017cni si\u0119\nze wzgl\u0119du na r\u00f3\u017cnice mi\u0119dzy j\u0119zykami\n2. Funkcjonalno\u015bci:\n1. Rozpoznawanie komend g\u0142osowych w j\u0119zyku polskim\n2. Synteza mowy z odpowiedziami\n3. Obs\u0142uga podstawowych operacji matematycznych\n4. Historia oblicze\u0144\n5. Przyciski start/stop do kontroli nas\u0142uchiwania",
        "headings": [],
        "images": 0
    }
]